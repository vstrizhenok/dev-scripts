#!/usr/bin/env python

from os import listdir
from os.path import isfile

import sys, getopt, os

### configure nginx
user = ""
user_home_path = ""
user_bashrc = ".bashrc"
user_log_path = "/log"
user_web_path = "/web"

bash_path = "/bin/bash"

server_ip = ""
server_port = "80"

nginx_server_listen = ""
nginx_sites_available_path = "/etc/nginx/sites-available.users/default"
nginx_sites_enabled_path = "/etc/nginx/sites-enabled.users"
nginx_user_sites_enabled_path = ""

web_source_path = "/home/pvoid/web"

def main(argv):
        if len(argv) < 1 :
		print "error: username can not be null"
		display_help()
        if len(argv) < 2 :
		print "error: server ip can not be null"
		display_help()

	opts = []
	args = []
	try:
		opts, args = getopt.getopt(argv, "c:b:", [ "configure=", "base-path=" ])
	except getopt.GetoptError as e:
		print str(e)
		display_help()
		sys.exit(2)

	global user_home_path

	configure = None
	user_home_path = None
	for opt, value in opts:		
		if opt == "-c" or opt == "--configure": configure = value
		elif opt == "-b" or opt == "--base-path": user_home_path = value

	if configure is None or len(configure) <= 0:
		print "configuration is not set. will be used `all` by default"	
		configure = "configure_all"
	else:
		configure = "configure_" + configure

	if configure not in globals():
		print "configuration option `" + configure + "` is not found"
		print ""
		display_help()

	init_variables(args[0], args[1])
	if user_home_path is None:
		user_home_path = "/home/" + user

	globals()[configure]()

def configure_all():
	configure_user()
	configure_web()
	configure_nginx()

def display_help():
        print "Usage: <username> <server_ip>"
	print "Options:"
	print "-c, --configure - configuration tasks. Available values: user, web, nginx, all"
        sys.exit(2)

def init_variables(l_user, l_server_ip):
        global user, server_ip, nginx_server_listen, nginx_user_sites_enabled_path

        user = l_user
        server_ip = l_server_ip
        nginx_server_listen = server_ip + ":" + server_port
        nginx_user_sites_enabled_path = nginx_sites_enabled_path + "/" + user

	global user_home_path, user_log_path, user_web_path

	if user_home_path is None:
                user_home_path = "/home/" + user

	user_log_path = user_home_path + "/" + user_log_path
        user_web_path = user_home_path + "/" + user_web_path

def configure_web():
	os.system("cp -Rf " + web_source_path + " " + user_web_path)
	os.system("chown -Rf " + user + ": " + user_web_path)

def configure_user():
	os.system("useradd -g www-data -m -s " + bash_path + " " + user)
	os.system("chown -Rf " + user + ": " + user_home_path)
	os.system("echo \"umask 0007\" >> " + user_home_path + "/" + user_bashrc)

def configure_nginx():
	mkdir(user_log_path)
	nginx_log_path = user_log_path + "/nginx"
	mkdir(nginx_log_path)

	mkdir(user_web_path)
	mkdir(nginx_user_sites_enabled_path)
	files = [ f for f in listdir(nginx_sites_available_path) if os.path.splitext(f)[1] == ".conf" ]

	for file in files:
		configure_nginx_file(file)

	os.system("service nginx restart")

def configure_nginx_file(file):
	src_file = nginx_sites_available_path + "/" + file
	dst_file = nginx_user_sites_enabled_path + "/" + file

	with open(src_file) as f:
		content = f.read()

	replaces = [ ("SERVER_LISTEN", nginx_server_listen), ("SERVER_IP", server_ip), ("SERVER_PORT", server_port), ("USER_HOME_PATH", user_home_path), ("USERNAME", user) ]
	for needle, replacement in replaces:
		content = content.replace("{{" + needle + "}}", replacement)

	with open(dst_file, "w") as f:
		f.write(content)

	print "it was wrote " + dst_file

def mkdir(dir):
	if not os.path.isdir(dir):
		os.mkdir(dir)
		print "directory " + dir + " has been created"

if __name__ == "__main__":
	main(sys.argv[1:])
